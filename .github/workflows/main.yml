name: Test and Deploy to AWS Lambda

permissions:
  id-token: write
  contents: read
  packages: write

on:
  push:
    branches:
      - master
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Copy the correct config file based on branch
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          cp config_production.json config.json
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          cp config_develop.json config.json
        else
          cp config_develop.json config.json
        fi

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run tests
      run: |
        pytest tests/

  deploy:
    needs: test  # This makes deploy wait for test to succeed
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Copy the correct config file based on branch
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          cp config_production.json config.json
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          cp config_develop.json config.json
        else
          cp config_develop.json config.json
        fi

    - name: Set environment variables
      id: env_vars
      run: ./set_env_vars.sh

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with: 
        audience: sts.amazonaws.com
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: closurebot
        IMAGE_TAG: closurebot-on511-${{ github.sha }}
        LATEST_TAG: closurebot-on511-latest
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_TAG" >> $GITHUB_OUTPUT

    - name: Deploy to AWS Lambda
      run: |
        IMAGE_URI="${{ steps.build-image.outputs.image }}"
        echo "Deploying image: $IMAGE_URI"
        
        if ! aws lambda update-function-code \
          --function-name ${{ steps.env_vars.outputs.FUNCTION_NAME }} \
          --image-uri $IMAGE_URI | jq 'del(.Environment)' | cat; then
          echo "Failed to deploy to AWS Lambda"
          exit 1
        else
          echo "Successfully deployed to AWS Lambda"
        fi