name: Test and Deploy to AWS Lambda

permissions:
  id-token: write
  contents: read
  packages: write # Added for ECR permissions

on:
  push:
    branches:
      - master
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Copy the correct config file based on branch
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          cp config_production.json config.json
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          cp config_develop.json config.json
        else
          cp config_develop.json config.json
        fi

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run tests
      run: |
        pytest tests/

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Copy the correct config file based on branch
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          cp config_production.json config.json
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          cp config_develop.json config.json
        else
          cp config_develop.json config.json
        fi

    - name: Set environment variables
      id: env_vars
      run: ./set_env_vars.sh

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        audience: sts.amazonaws.com
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        PROJECT_NAME: closurebot-ab511
      run: |
        # Set ECR repository and tags based on branch
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          ECR_REPOSITORY="${PROJECT_NAME}-prod"
          IMAGE_TAG="${PROJECT_NAME}-${{ github.sha }}"
          LATEST_TAG="latest-${PROJECT_NAME}"
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          ECR_REPOSITORY="${PROJECT_NAME}-dev"
          IMAGE_TAG="${PROJECT_NAME}-dev-${{ github.sha }}"
          LATEST_TAG="latest-${PROJECT_NAME}-dev"
        else
          # Default to dev for other branches
          ECR_REPOSITORY="${PROJECT_NAME}-dev"
          IMAGE_TAG="${PROJECT_NAME}-dev-${{ github.sha }}"
          LATEST_TAG="latest-${PROJECT_NAME}-dev"
        fi
        
        echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_ENV
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
        
        # Build and push commit-tagged image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Build and push latest-tagged image (separate build with unique identifier)
        docker build --build-arg BUILD_TYPE=latest -t $ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_TAG
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_TAG" >> $GITHUB_OUTPUT

    - name: Wait for ECR propagation
      run: sleep 5

    - name: Debug ECR and Lambda Access
      run: |
        echo "=== DEBUGGING ECR AND LAMBDA ACCESS ==="
        echo "AWS Account ID: $(aws sts get-caller-identity --query Account --output text)"
        echo "AWS Region: $AWS_DEFAULT_REGION"
        echo "ECR Repository: $ECR_REPOSITORY"
        echo "Image Tag: $IMAGE_TAG"
        echo "Latest Tag: $LATEST_TAG"
        
        # Test ECR authentication
        echo "=== Testing ECR Authentication ==="
        aws ecr get-authorization-token --query 'authorizationData[0].authorizationToken' --output text | base64 -d | head -c 50
        echo ""
        
        # Test ECR repository access
        echo "=== Testing ECR Repository Access ==="
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --query 'repositories[0].repositoryName' --output text
        echo "Repository exists: $?"
        
        # Test ECR image access
        echo "=== Testing ECR Image Access ==="
        aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$LATEST_TAG --query 'imageDetails[0].imageDigest' --output text
        echo "Image exists: $?"
        
        # Test Lambda function access
        echo "=== Testing Lambda Function Access ==="
        aws lambda get-function --function-name ${{ steps.env_vars.outputs.FUNCTION_NAME }} --query 'Configuration.Role' --output text
        echo "Lambda function accessible: $?"
        
        # Test IAM permissions simulation
        echo "=== Testing IAM Permissions ==="
        LAMBDA_ROLE=$(aws lambda get-function --function-name ${{ steps.env_vars.outputs.FUNCTION_NAME }} --query 'Configuration.Role' --output text)
        echo "Lambda Role: $LAMBDA_ROLE"
        
        # Test ECR permissions
        aws iam simulate-principal-policy \
          --policy-source-arn "$LAMBDA_ROLE" \
          --action-names "ecr:BatchGetImage" "ecr:GetAuthorizationToken" \
          --resource-arns "arn:aws:ecr:$AWS_DEFAULT_REGION:$(aws sts get-caller-identity --query Account --output text):repository/$ECR_REPOSITORY" \
          --query 'EvaluationResults[*].{Action:EvalActionName,Decision:EvalDecision}' \
          --output table

    - name: Deploy to AWS Lambda
      run: |
        IMAGE_URI="${{ steps.build-image.outputs.image }}"
        echo "=== DEPLOYING TO AWS LAMBDA ==="
        echo "Deploying image: $IMAGE_URI"
        echo "Function name: ${{ steps.env_vars.outputs.FUNCTION_NAME }}"
        
        # Deploy with detailed error output
        echo "=== Running Lambda Update ==="
        if aws lambda update-function-code \
          --function-name ${{ steps.env_vars.outputs.FUNCTION_NAME }} \
          --image-uri $IMAGE_URI \
          --debug; then
          echo "✅ Successfully deployed to AWS Lambda"
        else
          echo "❌ Failed to deploy to AWS Lambda"
          echo "=== DEBUGGING FAILED DEPLOYMENT ==="
          echo "Checking Lambda function state..."
          aws lambda get-function --function-name ${{ steps.env_vars.outputs.FUNCTION_NAME }} --query 'Configuration.{State:State,LastUpdateStatus:LastUpdateStatus}' --output table
          echo "Checking ECR image availability..."
          aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$LATEST_TAG --query 'imageDetails[0]' --output json
          exit 1
        fi